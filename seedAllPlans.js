// Script para adicionar todos os planos padr√£o ao banco de dados
// Execute este script com: node seedAllPlans.js

const API_BASE = 'http://localhost:3002/api';

// Planos padr√£o a serem criados
const defaultPlans = [
  {
    name: 'B√°sico',
    description: 'Ideal para corretores iniciantes',
    maxProperties: 5,
    price: 29.90,
    duration: 30,
    features: [
      'At√© 5 im√≥veis publicados',
      'Fotos ilimitadas',
      'Destaque na busca',
      'Suporte por email'
    ],
    isActive: true,
    priority: 1
  },
  {
    name: 'Profissional',
    description: 'Para corretores em crescimento',
    maxProperties: 20,
    price: 79.90,
    duration: 30,
    features: [
      'At√© 20 im√≥veis publicados',
      'Fotos e v√≠deos ilimitados',
      'Destaque premium na busca',
      'Estat√≠sticas de visualiza√ß√£o',
      'Suporte priorit√°rio'
    ],
    isActive: true,
    priority: 2
  },
  {
    name: 'Premium',
    description: 'Para imobili√°rias e corretores estabelecidos',
    maxProperties: 100,
    price: 199.90,
    duration: 30,
    features: [
      'At√© 100 im√≥veis publicados',
      'Fotos, v√≠deos e tours virtuais',
      'Destaque m√°ximo na busca',
      'Estat√≠sticas completas',
      'API de integra√ß√£o',
      'Suporte 24/7'
    ],
    isActive: true,
    priority: 3
  },
  {
    name: 'Empresarial',
    description: 'Solu√ß√£o completa para grandes imobili√°rias',
    maxProperties: 500,
    price: 499.90,
    duration: 30,
    features: [
      'At√© 500 im√≥veis publicados',
      'Todos os recursos Premium',
      'M√∫ltiplos usu√°rios',
      'Relat√≥rios personalizados',
      'Integra√ß√£o com CRM',
      'Gerente de conta dedicado'
    ],
    isActive: true,
    priority: 4
  },
  {
    name: 'Bronze',
    description: 'Plano intermedi√°rio com bom custo-benef√≠cio',
    maxProperties: 10,
    price: 49.90,
    duration: 30,
    features: [
      'At√© 10 im√≥veis publicados',
      'Fotos ilimitadas',
      'Destaque bronze na busca',
      'Relat√≥rios b√°sicos',
      'Suporte por email e chat'
    ],
    isActive: true,
    priority: 5
  },
  {
    name: 'Silver',
    description: 'Para corretores com demanda m√©dia',
    maxProperties: 30,
    price: 99.90,
    duration: 30,
    features: [
      'At√© 30 im√≥veis publicados',
      'Fotos e v√≠deos ilimitados',
      'Destaque silver na busca',
      'Estat√≠sticas avan√ßadas',
      'Suporte priorit√°rio por telefone'
    ],
    isActive: true,
    priority: 6
  },
  {
    name: 'Gold',
    description: 'Plano avan√ßado para profissionais exigentes',
    maxProperties: 50,
    price: 149.90,
    duration: 30,
    features: [
      'At√© 50 im√≥veis publicados',
      'Todos os tipos de m√≠dia',
      'Destaque gold na busca',
      'Estat√≠sticas em tempo real',
      'API b√°sica',
      'Suporte VIP'
    ],
    isActive: true,
    priority: 7
  }
];

// Fun√ß√£o para fazer login e obter token de admin
async function getAdminToken() {
  try {
    const response = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'admin@litoral.com',
        password: 'senha123'
      })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || 'Erro ao fazer login');
    }
    
    return data.token;
  } catch (error) {
    console.error('‚ùå Erro ao obter token de admin:', error.message);
    throw error;
  }
}

// Fun√ß√£o para criar um plano
async function createPlan(plan, token) {
  try {
    const response = await fetch(`${API_BASE}/plans`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(plan)
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      // Se o plano j√° existe, n√£o √© erro
      if (data.error && data.error.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è  Plano "${plan.name}" j√° existe, pulando...`);
        return null;
      }
      throw new Error(data.error || `Erro ao criar plano ${plan.name}`);
    }
    
    return data.plan;
  } catch (error) {
    console.error(`   ‚ùå Erro ao criar plano ${plan.name}:`, error.message);
    return null;
  }
}

// Fun√ß√£o principal para adicionar todos os planos
async function seedAllPlans() {
  try {
    console.log('üöÄ Iniciando seed de planos...\n');
    
    console.log('üîê Fazendo login como administrador...');
    const token = await getAdminToken();
    console.log('‚úÖ Login realizado com sucesso!\n');
    
    console.log('üìã Criando planos...');
    
    let createdCount = 0;
    let skippedCount = 0;
    
    for (const plan of defaultPlans) {
      console.log(`\n   üì¶ Processando plano "${plan.name}"...`);
      const created = await createPlan(plan, token);
      
      if (created) {
        console.log(`   ‚úÖ Plano "${plan.name}" criado com sucesso!`);
        console.log(`      üí∞ Pre√ßo: R$ ${plan.price}`);
        console.log(`      üè† Limite: ${plan.maxProperties} im√≥veis`);
        createdCount++;
      } else {
        skippedCount++;
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä Resumo da opera√ß√£o:');
    console.log(`   ‚úÖ Planos criados: ${createdCount}`);
    console.log(`   ‚ö†Ô∏è  Planos existentes (pulados): ${skippedCount}`);
    console.log(`   üì¶ Total processado: ${defaultPlans.length}`);
    console.log('='.repeat(50));
    
    console.log('\nüéâ Seed de planos conclu√≠do com sucesso!');
    console.log('üí° Agora voc√™ pode acessar o sistema e selecionar um plano.');
    
  } catch (error) {
    console.error('\n‚ùå Erro fatal:', error.message);
    process.exit(1);
  }
}

// Executar o script
seedAllPlans();